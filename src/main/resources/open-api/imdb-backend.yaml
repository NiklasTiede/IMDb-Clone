openapi: 3.0.3
info:
  title: Api Documentation
  description: Api Documentation
  termsOfService: 'urn:tos'
  contact: {}
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
  version: '1.0'
servers:
  - url: 'http://localhost:8080'
    description: Inferred Url
tags:
  - name: another-controller
    description: Another Controller
  - name: movie-controller
    description: Movie Controller
  - name: user-controller
    description: User Controller
paths:
  /json:
    get:
      tags:
        - another-controller
      summary: json
      operationId: jsonUsingGET
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /simple:
    get:
      tags:
        - another-controller
      summary: simple
      operationId: simpleUsingGET
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/todo/{id}':
    get:
      tags:
        - another-controller
      summary: json2
      operationId: json2UsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Todo'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/movie/{movieId}':
    get:
      tags:
        - movie-controller
      summary: findMovieById
      operationId: findMovieByIdUsingGET
      parameters:
        - name: movieId
          in: path
          description: movieId
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - movie-controller
      summary: deleteMovieById
      operationId: deleteMovieByIdUsingDELETE
      parameters:
        - name: movieId
          in: path
          description: movieId
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /movieExactSearch:
    get:
      tags:
        - movie-controller
      summary: findMovieByTitleExactSearch
      operationId: findMovieByTitleExactSearchUsingGET
      parameters:
        - name: title
          in: query
          description: title
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /movieSubstringSearch:
    get:
      tags:
        - movie-controller
      summary: findMovieByTitleSubstringSearch
      operationId: findMovieByTitleSubstringSearchUsingGET
      parameters:
        - name: title
          in: query
          description: title
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /movies:
    get:
      tags:
        - movie-controller
      summary: findAllMovies
      operationId: findAllMoviesUsingGET
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/deleteUserById/{id}':
    delete:
      tags:
        - user-controller
      summary: deleteUser
      operationId: deleteUserUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/deleteUserByName/{username}':
    delete:
      tags:
        - user-controller
      summary: deleteUser
      operationId: deleteUserUsingDELETE_1
      parameters:
        - name: username
          in: path
          description: username
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /register:
    post:
      tags:
        - user-controller
      summary: addUser
      operationId: addUserUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/substringSearch/{phoneSubstring}':
    get:
      tags:
        - user-controller
      summary: getUsersomethingi
      operationId: getUsersomethingiUsingGET
      parameters:
        - name: phoneSubstring
          in: path
          description: phoneSubstring
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /updateEmail:
    put:
      tags:
        - user-controller
      summary: updateEmail
      operationId: updateEmailUsingPUT
      parameters:
        - name: oldEmail
          in: query
          description: oldEmail
          required: false
          style: form
          schema:
            type: string
        - name: newEmail
          in: query
          description: newEmail
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/user/{id}':
    get:
      tags:
        - user-controller
      summary: getUserById
      operationId: getUserByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /users:
    get:
      tags:
        - user-controller
      summary: getUsers
      operationId: getUsersUsingGET
      parameters:
        - name: username
          in: query
          description: username
          required: false
          style: form
          schema:
            type: string
        - name: email
          in: query
          description: email
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /users/email:
    patch:
      tags:
        - user-controller
      summary: updateEmail
      operationId: updateEmailUsingPATCH
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/users/{id}':
    put:
      tags:
        - user-controller
      summary: replaceUser
      operationId: replaceUserUsingPUT
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
components:
  schemas:
    Movie:
      title: Movie
      type: object
      properties:
        id:
          type: integer
          format: int32
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/Rating'
        title:
          type: string
        year:
          type: string
    Rating:
      title: Rating
      type: object
      properties:
        id:
          type: integer
          format: int32
        rating:
          type: integer
          format: int32
    Todo:
      title: Todo
      type: object
      properties:
        completed:
          type: boolean
        id:
          type: integer
          format: int64
        title:
          type: string
        userId:
          type: integer
          format: int64
    User:
      title: User
      required:
        - username
      type: object
      properties:
        bio:
          type: string
        email:
          type: string
        firstName:
          type: string
        id:
          type: integer
          format: int64
        lastName:
          type: string
        password:
          type: string
        phone:
          type: string
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/Rating'
        username:
          type: string
